#!/usr/bin/env python3

import os
import sys
import argparse
from argparse import RawTextHelpFormatter, ArgumentDefaultsHelpFormatter


DESCRIPTION = """
Create batch DELETE SQL statements based on a list of primary keys.

Note: SQL statements are not parameterised ergo unsafe.
Only use manually with your own arguments / files, no external sources.
And make a table backup before running anything.
'''
explain DELETE FROM {table}
WHERE {pk_column} IN (
{pklist}
);
'''

usage:
ig_sql_batch_delete --table users \\
                    --pkcol user_id \\
                    --pklist userids.txt \\
                    --size 20 \\
                    --where "city = 'Lyon'"
"""

def parse_args():
    class Formatter(
        ArgumentDefaultsHelpFormatter,
        RawTextHelpFormatter
    ):
        pass
    parser = argparse.ArgumentParser(description=DESCRIPTION,
                                     formatter_class=Formatter)
    parser.add_argument('--table', type=str, required=True,
                        help='Name of the table to delete from')
    parser.add_argument('--pkcol', type=str, required=True,
                        help='Name of the primary key column')
    parser.add_argument('--pklist', type=str, required=True,
                        help='File containing the list of primary keys')
    parser.add_argument('--size', type=int, default=2000,
                        help='Batch size')
    parser.add_argument('--where', type=str,
                        help='Extra where condition')
    return parser.parse_args()


def main():
    args = parse_args()
    if not os.path.isfile(args.pklist):
        print('file {f} not found'.format(f=args.pklist))
        return 1
    with open(args.pklist, 'r') as f:
        pks = f.read().splitlines()
    pk_batches = [pks[i:i+args.size]
                  for i in range(0, len(pks), args.size)]
    delete_statement = ("EXPLAIN DELETE FROM {table}\n"
                        "WHERE {column} IN (\n"
                        "'{pks}');\n")
    if args.where:
        delete_statement = ("EXPLAIN DELETE FROM {{table}}\n"
                            "WHERE {where}\n"
                            "AND {{column}} IN (\n"
                            "'{{pks}}');\n".format(where=args.where))
    for i, batch in enumerate(pk_batches):
        fname = 'delete_{table}_{no}.sql'.format(
            table=args.table,
            no=i
        )
        with open(fname, 'w') as f:
            f.write(delete_statement.format(
                table=args.table,
                column=args.pkcol,
                pks="',\n'".join(batch)
            ))


if __name__ == '__main__':
    sys.exit(main())
