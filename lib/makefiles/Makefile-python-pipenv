default_target: help

.PHONY: help
help: ## show this help
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) \
	| sort \
	| awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'


PIPENV = pipenv
PACKAGE = <packagename>


.PHONY: init
init: ## initialise the environment
	@echo '>> initialising'
	@pip install $(PIPENV)
	@$(PIPENV) install --dev

.PHONY: isort
isort: ## run isort imports
	@echo '>> isorting'
	$(PIPENV) run isort $(PACKAGE)

.PHONY: flake
flake: ## run flake8 styling
	@echo '>> flake8 styling'
	$(PIPENV) run flake8 $(PACKAGE)

.PHONY: lint
lint: ## run linter
	@echo '>> linting'
	$(PIPENV) run isort --check $(PACKAGE)
	$(PIPENV) run pylint --rcfile pylintrc $(PACKAGE)

.PHONY: test
test: # run tests
	@echo ">> testing"
	@$(PIPENV) run pytest \
		-v \
		--cov-report xml \
		--cov-report term-missing:skip-covered \
		--cov $(PACKAGE)/

.PHONY: bandit
bandit: ## run bandit static analysis
	@echo ">> bandit"
	$(PIPENV) run bandit -r .

.PHONY: mypy
mypy: ## run mypy type analysis
	@echo ">> mypy"
	$(PIPENV) run mypy --ignore-missing-imports .

.PHONY: gen-reqs
gen-reqs: ## generate requirements.txt for pip installable package
	@echo ">> generating requirements.txt"
	@jq -r '.default | to_entries[] | .key + .value.version' \
		Pipfile.lock > requirements.txt.tmp
	@echo '# autogenerated with make, do not modify by hand\n' > requirements.txt \
	&& cat requirements.txt.tmp >> requirements.txt \
	&& rm -f requirements.txt.tmp

.PHONY: build
build: lint mypy bandit test gen-reqs ## build project
